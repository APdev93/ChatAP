(function () {
	const e = document.getElementById("chat-container"),
		t = io();
	let n = [];
	document
		.getElementById("message-form")
		.addEventListener("submit", async function (s) {
			s.preventDefault(),
				(window.location.href = "#chat"),
				(a.style.height = "45px");
			const i = document.getElementById("message").value;
			new Date().toLocaleTimeString();
			let c = document.getElementById("btnSend");
			const d = { role: "user", content: i };
			n.push(d),
				r(n),
				(document.getElementById("message").value = ""),
				(c.innerHTML = '<span class="loading"></span>'),
				c.setAttribute("disabled", "true"),
				await (async function (a, s) {
					try {
						(await (async function (t) {
							const n = document.createElement("div");
							n.classList.add("chat-bubble", "chat-receiver");
							const a = document.createElement("div");
							a.classList.add("chat-content"), n.appendChild(a), e.appendChild(n);
							try {
								let e = await fetch("/check_prompt", {
									method: "POST",
									headers: { "Content-Type": "application/json" },
									body: JSON.stringify({ prompt: t }),
								});
								if (!e.ok) return (a.innerHTML = ""), n;
								"imaging" === (await e.json()).cmd
									? (a.innerHTML =
											'\n                <div class="loading-img loading01">\n                    <span>I</span>\n                    <span>m</span>\n                    <span>a</span>\n                    <span>g</span>\n                    <span>i</span>\n                    <span>n</span>\n                    <span>i</span>\n                    <span>n</span>\n                    <span>g</span>\n                    <span>.</span>\n                    <span>.</span>\n                    <span>.</span>\n                </div>')
									: (a.innerHTML = "<div class='loader'></div>");
							} catch (e) {
								a.innerHTML = "";
							}
							return n;
						})(a)) || l("Failed to processing message");
						let i = n.filter(e => "images" !== e.role);
						window.location.href = "#chat";
						const c = o(),
							d = await h(
								{ msg: btoa(window.crypto.randomUUID().replace(/-/gi, c)) },
								{ "X-Id": c },
							);
						if (d) {
							const e = { coming: s, last: i, sessionHash: btoa(d.snd) };
							await t.emit(`chat ${d.snd}`, e);
						} else console.log("Callback data is null, cannot send message");
					} catch (e) {
						l(e.message || e);
					}
				})(i, d);
		});
	window.matchMedia("(prefers-color-scheme: dark)").matches
		? document.documentElement.setAttribute("data-theme", "dark")
		: document.documentElement.removeAttribute("data-theme");
	const a = document.getElementById("message");
	var s = a.style.height;
	a.addEventListener("input", function () {
		this.value.includes("\n")
			? (this.style.borderRadius = "25px")
			: (this.style.borderRadius = "50px"),
			"" === this.value
				? (this.style.height = s)
				: ((this.style.height = "auto"),
				  (this.style.height = "45px"),
				  (this.style.height = this.scrollHeight + "px"));
	});
	const o = () => {
			let e = "";
			const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-";
			for (let n = 0; n < 10; n++) e += t.charAt(Math.floor(63 * Math.random()));
			return e;
		},
		i = window.markdownit({
			highlight: function (e, t) {
				let n = o();
				if (t && window.hljs.getLanguage(t))
					try {
						return `<div class="codehead">\n\t<p>${
							t || "plaintext"
						}</p>\n\t<button onclick="copyCode('${n}')"><i class="fa-regular fa-copy"></i> salin</button>\n</div>\n<pre class="hljs">\n     <code id="${n}">${
							window.hljs.highlight(t, e, !0).value
						}</code>\n</pre>`;
					} catch (e) {}
				return `<div class="codehead">\n\t<p></p>\n\t<button onclick="copyCode()"><i class="fa-regular fa-copy"></i> salin</button>\n</div>\n<pre class="hljs">\n     <code id="code">${i.utils.escapeHtml(
					e,
				)}</code>\n</pre>\n`;
			},
		});
	function c(e) {
		return i.render(e);
	}
	function l(t) {
		const n = document.createElement("div");
		n.classList.add("chat-bubble"), n.classList.add("chat-receiver");
		const a = document.createElement("div");
		return (
			a.classList.add("chat-content"),
			(a.innerHTML = `<p class='err-msg'>${t}</p>`),
			n.appendChild(a),
			e.appendChild(n),
			n
		);
	}
	function d() {
		document.querySelectorAll("a").forEach(function (e) {
			(e.style.color = "#0484ff"),
				((e.textContent.includes("[") && e.textContent.includes("]")) ||
					(e.textContent.includes("[[") && e.textContent.includes("]]"))) &&
					((e.textContent = e.textContent.replace("[", "").replace("]", "")),
					(e.textContent = e.textContent.replace("[[", "").replace("]]", "")),
					(e.style.textDecoration = "none"),
					(e.style.backgroundColor = "white"),
					(e.style.borderRadius = "50px"),
					(e.style.paddingLeft = "4.5px"),
					(e.style.paddingRight = "4.5px"),
					(e.style.color = "#0484ff"),
					(e.style.margin = "0"),
					(e.style.verticalAlign = "top"),
					(e.style.fontSize = "11px"),
					(e.style.margin = "3px"));
		});
	}
	function r(t) {
		try {
			(e.innerHTML = ""),
				t.forEach((n, a) => {
					const s = document.createElement("div");
					s.classList.add("chat-bubble"),
						"user" === n.role
							? s.classList.add("chat-sender")
							: s.classList.add("chat-receiver");
					const o = document.createElement("div");
					if ((o.classList.add("chat-content"), "images" === n.role)) {
						const e = document.createElement("img");
						(e.src = n.content), e.classList.add("chat-image"), o.appendChild(e), d();
					} else if ("user" === n.role)
						(o.innerHTML = n.content
							.replace(/\n/g, "<br>")
							.replace(/\t/g, "&nbsp;&nbsp;&nbsp;nbsp;")),
							d();
					else if ("user" !== n.role)
						if ((d(), a === t.length - 1)) {
							let t = 0,
								a = c(n.content).split(" ");
							!(function n() {
								var s = document.getElementById("btnSend");
								t <= a.length &&
									((o.innerHTML = a.slice(0, t).join(" ")),
									t++,
									d(),
									window.scrollTo({ top: e.scrollHeight, behavior: "smooth" }),
									t === a.length &&
										((s.innerHTML = '<i class="fa-solid fa-arrow-up"></i>'),
										(s.disabled = !1)),
									setTimeout(n, 10));
							})();
						} else (o.innerHTML = c(n.content)), d();
					s.appendChild(o), e.appendChild(s);
				});
		} catch (e) {
			console.log(e);
		}
	}
	async function h(e, t = {}) {
		try {
			let n = await fetch("/callback", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					"X-Action":
						"Kh816hhfaDshbJDwJKoFsWhHBXVNanajNvyio==" === atob(e.msg)
							? "revalidate"
							: "message",
					...t,
				},
				body: JSON.stringify({ msg: e }),
			});
			return n.ok ? await n.json() : null;
		} catch (e) {
			return console.warn(e), null;
		}
	}
	window.hljs.highlightAll(),
		t.on("connect", async function () {
			const e = await h({ msg: btoa("Kh816hhfaDshbJDwJKoFsWhHBXVNanajNvyio==") });
			e
				? t.on(`chat ${e.rec}`, async function (t) {
						try {
							if (e.error) return window.alert("Error Occured");
							n.push(t), await r(n), (window.location.href = "#chat");
						} catch (e) {
							l(e);
						}
				  })
				: console.log("Callback data is null, cannot listen for messages");
		});
})();
