(function () {
  function copyCode(e) {
    const t = document.getElementById(e).innerText;
    console.log(e, "copied"), navigator.clipboard.writeText(t);
  }
  const chatContainer = document.getElementById("chat-container"),
    socket = io();
  let copyCount = 0;

  setInterval(() => {
    const copy = document.getElementsByClassName("copyBtn");
    if (copyCount < copy.length) {
      for (let cop of copy) {
        const p = cop.cloneNode(true);
        const n = cop.getAttribute("data-id");
        console.log(n);
        p.addEventListener("click", () => {
          copyCode(n);
        });
        cop.parentNode.replaceChild(p, cop);
      }

      copyCount++;
    }
  }, 2500);
  let messages = [];

  //? Message Btn
  document
    .getElementById("message-form")
    .addEventListener("submit", async function (e) {
      e.preventDefault(),
        (window.location.href = "#chat"),
        (textarea.style.height = "45px");
      const t = document.getElementById("message").value;
      // new Date().toLocaleTimeString();
      let n = document.getElementById("btnSend");

      // ? role : user, content : Message dlm textbox
      const a = { role: "user", content: t };

      // ? Push ke history
      messages.push(a),
        // ? Render
        renderMessages(messages),
        (document.getElementById("message").value = ""),
        (n.innerHTML = '<span class="loading"></span>'),
        n.setAttribute("disabled", "true"),
        await sendMessage(t, a);
    });

  // ? Theme
  const applyPreferredTheme = () => {
    window.matchMedia("(prefers-color-scheme: dark)").matches
      ? document.documentElement.setAttribute("data-theme", "dark")
      : document.documentElement.removeAttribute("data-theme");
  };
  applyPreferredTheme();
  const textarea = document.getElementById("message");
  var originalHeight = textarea.style.height;
  textarea.addEventListener("input", function () {
    this.value.includes("\n")
      ? (this.style.borderRadius = "25px")
      : (this.style.borderRadius = "50px"),
      "" === this.value
        ? (this.style.height = originalHeight)
        : ((this.style.height = "auto"),
          (this.style.height = "45px"),
          (this.style.height = this.scrollHeight + "px"));
  });

  const generateId = () => {
      let e = "";
      const t =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-";
      for (let n = 0; n < 10; n++)
        e += t.charAt(Math.floor(63 * Math.random()));
      return e;
    },
    md = window.markdownit({
      highlight: function (e, t) {
        let n = generateId();
        if (t && window.hljs.getLanguage(t))
          try {
            return `<div class="codehead">\n\t<p>${
              t || "plaintext"
            }</p>\n\t<button class="copyBtn" data-id="${n}"><i class="fa-regular fa-copy"></i> salin</button>\n</div>\n<pre class="hljs">\n     <code id="${n}">${
              window.hljs.highlight(t, e, !0).value
            }</code>\n</pre>`;
          } catch (e) {}
        return `<div class="codehead">\n\t<p></p>\n\t<button onclick="copyCode()"><i class="fa-regular fa-copy"></i> salin</button>\n</div>\n<pre class="hljs">\n     <code id="code">${md.utils.escapeHtml(
          e
        )}</code>\n</pre>\n`;
      },
    });

  function formatMessage(e) {
    return md.render(e);
  }

  function getTime() {
    return new Date().toLocaleTimeString("id-ID", {
      hour: "numeric",
      minute: "numeric",
      hour12: !0,
    });
  }
  function errorMessage(e) {
    const t = document.createElement("div");
    t.classList.add("chat-bubble"), t.classList.add("chat-receiver");
    const n = document.createElement("div");
    return (
      n.classList.add("chat-content"),
      (n.innerHTML = `<p class='err-msg'>${e}</p>`),
      t.appendChild(n),
      chatContainer.appendChild(t),
      t
    );
  }

  // ? Proses messagenya
  async function processMessage(e) {
    const t = document.createElement("div");
    t.classList.add("chat-bubble", "chat-receiver");
    const n = document.createElement("div");
    n.classList.add("chat-content"),
      t.appendChild(n),
      chatContainer.appendChild(t);
    try {
      // ? Check jenis prompt
      let a = await fetch("/check_prompt", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt: e }),
      });
      if (!a.ok) return (n.innerHTML = ""), t;

      // ? Cek kalo image
      "imaging" === (await a.json()).cmd
        ? (n.innerHTML =
            '\n                <div class="loading-img loading01">\n                    <span>I</span>\n                    <span>m</span>\n                    <span>a</span>\n                    <span>g</span>\n                    <span>i</span>\n                    <span>n</span>\n                    <span>i</span>\n                    <span>n</span>\n                    <span>g</span>\n                    <span>.</span>\n                    <span>.</span>\n                    <span>.</span>\n                </div>')
        : (n.innerHTML = "<div class='loader'></div>");
    } catch (e) {
      n.innerHTML = "";
    }
    return t;
  }

  // ? Ga terlalu peduli ak
  function renderMessages(e) {
    try {
      (chatContainer.innerHTML = ""),
        e.forEach((t, n) => {
          const a = document.createElement("div");
          a.classList.add("chat-bubble"),
            "user" === t.role
              ? a.classList.add("chat-sender")
              : a.classList.add("chat-receiver");
          const s = document.createElement("div");
          if ((s.classList.add("chat-content"), "images" === t.role)) {
            const e = document.createElement("img");
            (e.src = t.content),
              e.classList.add("chat-image"),
              s.appendChild(e);
          } else if ("user" === t.role)
            s.innerHTML = t.content.replace(/\n/g, "<br>");
          else if ("user" !== t.role)
            if (n === e.length - 1) {
              let e = 0,
                n = formatMessage(t.content).split(" ");
              !(function t() {
                var a = document.getElementById("btnSend");
                e <= n.length &&
                  ((s.innerHTML = n.slice(0, e).join(" ")),
                  e++,
                  window.scrollTo({
                    top: chatContainer.scrollHeight,
                    behavior: "smooth",
                  }),
                  e === n.length &&
                    ((a.innerHTML = '<i class="fa-solid fa-arrow-up"></i>'),
                    (a.disabled = !1)),
                  setTimeout(t, 10));
              })();
            } else s.innerHTML = formatMessage(t.content);
          a.appendChild(s), chatContainer.appendChild(a);
        });
    } catch (e) {
      console.log(e);
    }
  }

  // ? Callback dipake di socket sama sendmess
  async function callback(e, head = {}) {
    try {
      let t = await fetch("/callback", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          // ? Nambahin action buat ngatur antara revalidate sama message
          "X-Action":
            atob(e.msg) === "Kh816hhfaDshbJDwJKoFsWhHBXVNanajNvyio=="
              ? "revalidate"
              : "message",

          // ? Additional headers
          ...head,
        },
        body: JSON.stringify({ msg: e }),
      });
      return t.ok
        ? await t.json()
        : (console.log("Cannot send callback"), null);
    } catch (e) {
      return console.warn(e), null;
    }
  }

  async function sendMessage(e, t) {
    try {
      (await processMessage(e)) || errorMessage("Failed to processing message");
      let n = messages.filter((e) => "images" !== e.role);
      window.location.href = "#chat";
      const id = generateId();
      const a = await callback(
        {
          // ? Knp harus ini? "KuYTgKONk816_UFvJDwJKoFsWhHBXVNiRwAyKk=="
          // ? Sekarang ganti uuid
          msg: btoa(window.crypto.randomUUID().replace(/-/gi, id)),
        },
        {
          // ? Key buat decrypt uuid base64
          "X-Id": id,
        }
      );
      if (a) {
        // ? Nambahin session hash jadi kalo session hashnya ga sama kyk snd error from server
        const e = { coming: t, last: n, sessionHash: btoa(a.snd) };
        await socket.emit(`chat ${a.snd}`, e);
      } else console.log("Callback data is null, cannot send message");
    } catch (e) {
      errorMessage(e.message || e);
    }
  }

  window.hljs.highlightAll(),
    // ? Connect socket
    socket.on("connect", async function () {
      const e = await callback({
        // ? Base64
        msg: btoa("Kh816hhfaDshbJDwJKoFsWhHBXVNanajNvyio=="),
      });
      e
        ? socket.on(`chat ${e.rec}`, async function (e) {
            try {
              if (e.error) return window.alert("Error Occured");
              messages.push(e),
                await renderMessages(messages),
                (window.location.href = "#chat");
            } catch (e) {
              errorMessage(e);
            }
          })
        : console.log("Callback data is null, cannot listen for messages");
    });
})();
